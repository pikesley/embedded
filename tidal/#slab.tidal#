d1 $ jux (iter 4) $ every 2 (chop 8) $ stack [sound "bd [bd ~ bd] bd bd",
                                              sound "~ cp8:3"
                                             ]
  # nudge "0.57"



d1 $ n "b4" # s "xx" # gain "0.7"
hush
d2 $ jux rev $ slow 4 $ n (offadd 0.125 12 $ offadd 0.25 7 $ "f3(3,8) a3*2 c3(5,8) e3*2") # s "[xx pno2]/2"
  # nudge "0.57"
  # cutoff (slow 4 $ scale 1000 5000 sine1)
  -- # resonance "0.2"
  -- # vowel "[a i u e]/4"
  -- # speed "2"

d1 $ sound "bd"
  # nudge "0.55"

d3 $ jux (iter 4) $ sound "drum ~ [odx drum] sn:4"
  # gain "1.1"
  # nudge "0.57"

d4 $ every 3 (rev) $ every 2 (# speed "2") $ slow 2 $ jux (iter 4) $ slowspread (chop) [64,128] $ sound "arc"
  # nudge "0.57"

d5 $ sound "drum"
hush

cps 0.4


import Data.Fixed
d1 $ superimpose

let juxBy n f p = stack [p |+| pan (pure $ mod' (0-(n/2)) 1), f $ p # pan (pure $ mod' (n/2) 1)]


d1 $ juxBy 1 (density 2) $ sound "bd"


d1 $ whenmod 6 3 (const silence) $ every 4 (density 2) $ n "1 2*4 5 ~" # s "metal"
  # nudge "0.55" # speed "0.5"

d1 $ sound "arpy" # speed "2" # speed "3"

d2 $ slow 8 $ chop 8 $ sound "bev" # unit "c" # speed "0.125"


hush
d1 silence
d1 $ n "c d4*2 e f" # sound "pno2" 

hush


d1 $ jux rev $ slowspread (chop) [8,32,128,64] $ sound "cp arpy*2 arpy:3 bd"
  # nudge "0.55"


d1 $ weave 16 (n (run 8) # s "arpy")
  [vowel "a e i u",
   vowel "i u e"
  ]

d1 $ weave 16 (n (run 8) # s "arpy")
  [vowel "a [e o] i o",
   vowel "e*4 u*3",
   vowel "i [e i e] i o",
   speed "1 2 3"
  ]

d1 $ weave 16 (sound "bd [sn drum:2*2] bd*2 [sn drum:1]")
  [vowel "a i u",
   vowel  "i o e u"
  ]
  
hush


d1 $ sound "alex2*16" # n (run 100)
  # pan sine1

hush
hush




1 2 3 4
2 3 4 1
3 4 1 2
4 1 2 3

d