cps 0.9

d1 $ juxBy 0.5 (2 <~) $ slowspread (stut 3 0.9) [0.05,0.06,0.07,0.1] $ sound "[bd8 bd8:3*2]@3 bd8:5*2"
  # speed "4"

d2 $ every 4 (slow 2) $ slow 2 $ juxBy 0.5 (2 <~) $ slowspread (stut 3 0.9) (map (*8) $ [0.05,0.06,0.07,0.1]) $ sound "[bd8 bd8:3*2]@3 bd8:5*2"
  # speed "4"


d3 $ sound "~ [~ ~ [bd8:7 bd8:7!6?]]"
  # room "0.8"
  # size (slow 4 $ scale 0.7 0.8 sine1)
  # orbit "1"

d4 $ off 0.125 (|*| up "7") $ off 0.25 (# up "3") $ sound "sb*2 [sb*2@3] sb"
  |*| up "[0 [1 [3 -1]/2]]/4"
  # gain "1.3"
  |*| speed "[1,0.5]"

d6 $ loopAt 4 $ jux (0.5 <~) $ chop 64 $ s "shakedown"

(d9 $ (slow 4 $ chop 16 $ sound "paper"
       # unit "c"
       # speed "[0.2]"
       # gain "1"))


:t range
"a" :: Pattern Int

d1 $ sound "in*8" # pan sine1


d5 $ jux (|*| speed "-1") $ off 0.125 (# speed "1.5") $ off 0.25 (# speed "1.5") $ n (fit 3 [0 .. 16] "[0 4] [1*2]@3 [2 4] 1 [2 3] 3") # s "amencutup*8"
  # gain "1.3"

d4 $ jux (iter 4) $ slow 2 $ juxBy 0.25 (density 2 . (|*| speed "2")) $ superimpose (density 1.5) $ stut 3 0.5 (-0.5) $ s "bd bd*2" # speed "1" # n (irand 4)

d2 $ sometimes (rev . chop 8) $ sometimes (|+| speed "2") $
  jux (0.25 <~) $ sound (samples "[ifdrums*8, future*8]" (run 8))
  # nudge "[0 0.04]*4" # shape "0.2"

d1 $ n (fit 3 [1 .. 5] "0*3 [1 2]@3") # s "claus"
  # pan "0"
  # cutoff "2000"
  # resonance "0.3"

d2 $ n (fit 3 [1 .. 7] "0*2 [1 [2 1]]@3") # s "claus"
  # pan "1"
  # cutoff "2000"
  
hush
d7 $ jux rev $ within (0,0.5) (every 3 $ density 2) $  within (0,0.25) (every 2 $ density 1.5) $ s "dirty*8" # n (whenmod 8 4 ((+ 12) <$>) $ "[d2 e1 f1 g1]/4")
  # gain "0.8"
  # resonance "0.3"
  # cutoff (slow 4 $ scale 1000 3000 saw1)
  # room "0.8"
  # size "0.9"
  # orbit "1"

d5 $ jux rev $ n ((subtract 12) <$> (offadd ((1/3)) (12) $ offadd 0.125 12 $ offadd 0.25 7 $ slow 4 $ "d1(3,8) e1(5,8) f1*2 g1*2")) # s "xx"
  # cutoff (scale 500 3000 saw1)
  # resonance "0.3"
  # gain "0.7"

d4 $ do let x = iter' 4 $ n "[[0 5] 6 [~ [[1? 3] ~]] [0 6], 2*8]" # s "drum"
        o <- slow 4 $ scale 0.01 0.02 sine1
        sometimes (echo 0.25) $ jux ((toRational o) <~) $ x

d3 $ stut 2 0.9 4 $ n (rev $ fit 4 [1 .. 7] "0*2 [1 [2 1]]@3") # s "claus"
  # pan "0.5"
  # speed (scale 1 2 $ discretise 0.25 rand)
  # orbit "1" # size "0.3" # room "0.3"

