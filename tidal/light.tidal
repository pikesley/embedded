import Sound.Tidal.OscStream
import Sound.OSC.FD
import Sound.OSC.Datum
import qualified System.Hardware.Serialport as SP
import Control.Monad
import Control.Monad.Loops
import qualified Data.ByteString.Char8 as B

let light :: Shape
    light = Shape {params = [red_p,
                             green_p,
                             blue_p
                            ],
                   cpsStamp = False,
                   latency = 0.04
                  }
    (rgb, rgb_p)     = pF "rgb"   (Just 0)
    (red, red_p)     = pF "red"   (Just 0)
    (green, green_p) = pF "green" (Just 0)
    (blue, blue_p)   = pF "blue"  (Just 0)
    lightSlang = OscSlang {
      path = "/light",
      timestamp = NoStamp,
      namedParams = False,
      preamble = []
      }
    lightBackend = do s <- makeConnection "127.0.0.1" 9099 lightSlang
                      return $ Backend s (\_ _ _ -> return ())
    lightServer = do s <- udpServer "127.0.0.1" 9099
                     output <- SP.openSerial "/dev/ttyUSB0" SP.defaultSerialSettings
                     forkIO $ lightLoop s output
    lightLoop s output = do m <- recvMessage s
                            act m output
                            lightLoop s output
    act ( Just (Message "/light" [Float r, Float g, Float b])) output =
      do SP.send output $ B.pack $ to256 r ++ "r\r"
         SP.send output $ B.pack $ to256 g ++ "g\r"
         SP.send output $ B.pack $ to256 b ++ "b\r"
         return ()
    act ( Just (Message "/lightrgb" [ASCII_String s])) output =
      do SP.send output $ B.pack $ s ++ "r"
         return ()
    act m output = do putStrLn $ "message: " ++ show m
                      return ()
    to256 f = show $ floor (f * 255)
    lightStream = do backend <- lightBackend
                     stream backend light

lightServer
l1 <- lightStream

l1 $ red "[0 0.5]*16" # green (slow 2 saw1) # blue sine1
l1 $ red "0"
output <- SP.openSerial "/dev/ttyUSB0" SP.defaultSerialSettings
let to256 f = show $ floor (f * 255)

SP.send output $ B.pack $ "0r\r"

l1 $ red "0.5*8"

lightServer


((\c -> redChannel ) toSRGB) <$> (p "red green" :: Pattern (ColourD))
